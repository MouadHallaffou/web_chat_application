import mongoose from 'mongoose';
import { config } from 'dotenv';
import path from 'path';

// Load environment variables
config({ path: path.join(__dirname, '../../.env') });

// Import all models to ensure they are registered
import { User } from '../models/user.model';
import { Message } from '../models/message.model';
import { Conversation } from '../models/conversation.model';
import { Friendship } from '../models/friendship.model';
import { FriendInvitation } from '../models/friend-invitation.model';
import { Notification } from '../models/notification.model';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/chatbot';

async function initSchemas() {
  try {
    console.log('üîß Initialisation des sch√©mas...');
    
    // Connexion √† MongoDB
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // R√©cup√©rer la base de donn√©es
    const db = mongoose.connection.db;
    
    // Lister toutes les collections existantes
    const collections = await db.listCollections().toArray();
    console.log('üìã Collections existantes :');
    collections.forEach(collection => {
      console.log(`   - ${collection.name}`);
    });
    
    // V√©rifier que les collections des mod√®les existent
    const modelCollections = [
      'users',
      'messages', 
      'conversations',
      'friendships',
      'friendinvitations',
      'notifications'
    ];
    
    console.log('\nüîç V√©rification des collections de mod√®les :');
    for (const collectionName of modelCollections) {
      const exists = collections.some(col => col.name === collectionName);
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${collectionName}`);
      
      if (!exists) {
        console.log(`   ‚ö†Ô∏è  La collection ${collectionName} sera cr√©√©e automatiquement lors de la premi√®re insertion`);
      }
    }
    
    // Cr√©er des index pour optimiser les performances
    console.log('\nüìä Cr√©ation des index...');
    
    // Index pour User
    await User.collection.createIndex({ email: 1 }, { unique: true });
    await User.collection.createIndex({ username: 1 }, { unique: true });
    console.log('   ‚úÖ Index User cr√©√©s');
    
    // Index pour Message
    await Message.collection.createIndex({ conversationId: 1, createdAt: -1 });
    await Message.collection.createIndex({ senderId: 1 });
    console.log('   ‚úÖ Index Message cr√©√©s');
    
    // Index pour Conversation
    await Conversation.collection.createIndex({ participants: 1 });
    await Conversation.collection.createIndex({ 'lastMessage.timestamp': -1 });
    console.log('   ‚úÖ Index Conversation cr√©√©s');
    
    // Index pour Friendship
    await Friendship.collection.createIndex({ requesterId: 1, recipientId: 1 }, { unique: true });
    await Friendship.collection.createIndex({ status: 1 });
    console.log('   ‚úÖ Index Friendship cr√©√©s');
    
    // Index pour Notification
    await Notification.collection.createIndex({ recipientId: 1, read: 1 });
    await Notification.collection.createIndex({ createdAt: -1 });
    console.log('   ‚úÖ Index Notification cr√©√©s');
    
    console.log('\nüéâ Initialisation des sch√©mas termin√©e !');
    console.log('üí° Les collections seront cr√©√©es automatiquement lors de la premi√®re utilisation');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des sch√©mas:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  initSchemas();
}

export { initSchemas }; 